# Chatbot


Vamos explorar o formato chat para conversar com chatbots personalizados ou especializados em certos temas ou comportamentos.

A função `create_chat_completion` do *package* {openai} permite ter este tipo de diálogos.

```{r, c1}
#| eval: false

res <- create_chat_completion(
   model = "gpt-3.5-turbo",
   messages = list(
       list(
           "role" = "system",
           "content" = "És um assistente que fala como o Camões"
       ),
       list(
           "role" = "user",
           "content" = "Conta-me uma anedota."
       ),
       list(
           "role" = "assistant",
           "content" = "Porque é que a galinha atravessou a estrada?"
       ),
       list(
           "role" = "user",
           "content" = "Não sei."
       )
   )
)

res$choices$message.content
```

```{r, c2}
#| eval: false

res <- create_chat_completion(
   model = "gpt-3.5-turbo",
   messages = list(
       list(
           "role" = "system",
           "content" = "És um chatbot amistoso"
       ),
       list(
           "role" = "user",
           "content" = "Olá, chamo-me Elsa."
       )
       )
   )

res$choices$message.content

create_chat_completion(
   model = "gpt-3.5-turbo",
   messages = list(
       list(
           "role" = "system",
           "content" = "És um chatbot amistoso"
       ),
       list(
           "role" = "user",
           "content" = "Podes lembrar-me como me chamo?"
       )
       )
   )$choices$message.content
```

O chatbot não sabe o nome pois cada conversa está delimitada por execução da função, ou seja, cada conversa é uma interacção *standalone*. 

```{r, c3}
#| eval: false

res <- create_chat_completion(
   model = "gpt-3.5-turbo",
   messages = list(
       list(
           "role" = "system",
           "content" = "És um chatbot amistoso"
       ),
       list(
           "role" = "user",
           "content" = "Olá, chamo-me Bruno."
       ),
       list(
           "role" = "assistant",
           "content" = "Olá Bruno, em que te posso ajudar?"
       ),
       list(
           "role" = "user",
           "content" = "Podes lembrar-me como me chamo?"
       )
   )
)

res$choices$message.content
```

Agora o modelo já sabe responder.

```{r, c4}
#| eval: false

instrucao <- "Tu és o OrderBot, um serviço automatizado que regista os pedidos e 
           depois pergunta onde é a entrega. Recebes o pedido inteiro depois fazes 
           o seu resumo e dizes qual é o preço. O menu inclui: pizza peperoni: 10€;
           pizza de queijo: 9€;
           pizza vegetariana: 15€;
           batatas: 5€
           salada: 4€
           molho: 2€
           bebida: 7€"

res <- create_chat_completion(
   model = "gpt-3.5-turbo",
   messages = list(
       list(
           "role" = "system",
           "content" = instrucao
       ),
       list(
           "role" = "user",
           "content" = "Olá, chamo-me Bruno."
       ),
       list(
           "role" = "assistant",
           "content" = "Olá Bruno, qual é o teu pedido?"
       ),
       list(
           "role" = "user",
           "content" = readline()
       )
   )
)

res$choices$message.content
```

Podemos usar o package [{OpenAIR}](https://openair-lib.org/) para termos um chatbot à nossa medida e com o qual possamos interatuar.

```{r, c5}
#| eval: false

library(devtools)
devtools::install_github("umatter/OpenAIR")

library("TheOpenAIR")

chat(instrucao)

chat("eu não fiz esse pedido. Quero fazer um pedido novo")

chat("quero uma pizza de queijo com salada, molho e duas bebidas")

```


Este package permitemos fazer coisas tão simples como *RegExp* através de comandos escritos

```{r, c6}
#| eval: false


resp <- "Remove todos os numeros de '5XC-2a09ujnap9o2q0MP'
a tua resposta deverá ter apenas os caracteres que sobram" %c%
  "message" 

resp

```

